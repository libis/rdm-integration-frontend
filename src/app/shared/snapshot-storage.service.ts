// Author: Generated by AI assistant. Apache 2.0 License
// Simple sessionStorage-based snapshot persistence used to restore Connect form state

import { Injectable } from '@angular/core';

// Key kept intentionally short; prefix to avoid collisions
const STORAGE_KEY_CONNECT = 'rdm-connect-snapshot';

export interface ConnectSnapshot {
  plugin?: string;
  pluginId?: string;
  user?: string;
  token?: string;
  repo_name?: string;
  url?: string;
  option?: string;
  dataverse_token?: string;
  dataset_id?: string;
  collectionId?: string;
  // Persist minimal lists so returning user still sees their previous selections (optional)
  pluginIds?: unknown;
  repoNames?: unknown;
  branchItems?: unknown;
  collectionItems?: unknown;
  doiItems?: unknown;
}

@Injectable({ providedIn: 'root' })
export class SnapshotStorageService {
  private safeParse<T>(raw: string | null): T | undefined {
    if (!raw) return undefined;
    try {
      return JSON.parse(raw) as T;
    } catch {
      return undefined;
    }
  }

  loadConnect(): ConnectSnapshot | undefined {
    return this.safeParse<ConnectSnapshot>(
      sessionStorage.getItem(STORAGE_KEY_CONNECT),
    );
  }

  saveConnect(snapshot: ConnectSnapshot): void {
    try {
      sessionStorage.setItem(STORAGE_KEY_CONNECT, JSON.stringify(snapshot));
    } catch {
      // ignore quota/security errors
    }
  }

  mergeConnect(partial: Partial<ConnectSnapshot>): void {
    const existing = this.loadConnect() || {};
    const merged: ConnectSnapshot = { ...existing, ...partial };
    this.saveConnect(merged);
  }

  clearConnect(): void {
    try {
      sessionStorage.removeItem(STORAGE_KEY_CONNECT);
    } catch {
      // ignore
    }
  }
}
